# pixels configurations
# pixels.var.dir is where the lock files created.
pixels.var.dir=/home/pixels/opt/pixels/var/
metric.bytesms.interval=51200
metric.reader.json.dir=/dev/shm/
metric.node.text.dir=/home/pixels/opt/node_exporter/text/
metric.reader.collect.prob=0.1
pixels.warehouse.path=hdfs://node01:9000/
# the scheme of the storage systems that are enabled, e.g., hdfs,file,s3.
enabled.storage.schemes=s3,file

# dbconfig
metadata.db.driver=com.mysql.jdbc.Driver
metadata.db.user=pixels
metadata.db.password=pixels27
metadata.db.url=jdbc:mysql://node01:3306/pixels_metadata?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull

# the dir containing core-site.xml and hdfs-site.xml
hdfs.config.dir=/opt/hadoop-2.7.3/etc/hadoop/

# metadada server
metadata.server.port=18888
metadata.server.host=node01

# transaction server
trans.server.port=18889
trans.server.host=node01

# metrics server
metrics.server.enabled=false

# pixels-load
pixel.stride=10000
row.group.size=268435456
block.size=2147483648
block.replication=1
block.padding=true
encoding=true
compression.block.size=1

# pixels reader
# row batch size for pixels record reader, default value is 10000
row.batch.size=10000

# Presto configuration (pixels)
presto.pixels.jdbc.url=jdbc:presto://localhost:8080/pixels/pixels
presto.orc.jdbc.url=jdbc:presto://localhost:8080/hive/default
presto.user=pixels
presto.password=null
presto.ssl=false
presto.query.url=http://localhost:8080/v1/query
record.cursor.enabled=false

# etcd configuration
# etcd.hosts=presto00,presto01,presto02,presto03,presto04
etcd.hosts=node01
etcd.port=2379

# pixels storage
# split size will be set to this fixed value if it is positive
fixed.split.size=-1
# true to enable just-in-time splitting in ordered path.
multi.split.for.ordered=true
# the size in bytes of a table scan split, 16MB by default
split.size.mb=16
# the number of rows in a table scan split, 2560000 by default, <= 0 for unlimited
split.size.rows=2560000
# the type of split size index to be used, can be cost_based or inverted
splits.index.type=cost_based
# which scheduler to use for read requests.
# valid values: noop, sortmerge, ratelimited
read.request.scheduler=sortmerge
read.request.merge.gap=2097152
# rate limits only work for s3+ratelimited.
read.request.rate.limit.rps=6000
read.request.rate.limit.mbps=800
read.request.enable.retry=true
read.request.max.retry.num=3
# the interval in milliseconds of retry queue checks.
read.request.retry.interval.ms=1000
projection.read.enabled=false
s3.enable.async=true
s3.use.async.client=true
s3.connection.timeout.sec=3600
s3.connection.acquisition.timeout.sec=3600
s3.client.service.threads=40
s3.max.request.concurrency=1000
s3.enable.request.diversion=false
# the percentile of concurrency for <1MB, 1-10MB, and >=10MB requests
s3.request.concurrency.assign=80:15:5
s3.max.pending.requests=100000

# pixels executor
executor.input.storage=s3
executor.intermediate.storage=s3
executor.stage.completion.ratio=0.6
executor.intermediate.folder=/pixels-lambda-test/
executor.selectivity.enabled=true
# the number of threads used in each worker
executor.intra.worker.parallelism=8
# the maximum size in megabytes of a broadcast table.
join.broadcast.threshold.mb=256
# the maximum number of rows in a broadcast table.
join.broadcast.threshold.rows=20000000
# the maximum (average) size of a partition in partitioned join.
join.partition.size.mb=1024
# the maximum (average) number of rows in a partition in partitioned join.
join.partition.size.rows=50000000
aggregation.compute.final.in.server=true
# if the number partial aggregation files are larger than this threshold, pre-aggregation is used.
aggregation.pre-aggregate.threshold=64
# the names of the cloud function workers
scan.worker.name=ScanWorker
partition.worker.name=PartitionWorker
broadcast.join.worker.name=BroadcastJoinWorker
broadcast.chain.join.worker.name=BroadcastChainJoinWorker
partitioned.join.worker.name=PartitionedJoinWorker
partitioned.chain.join.worker.name=PartitionedChainJoinWorker
aggregation.worker.name=AggregationWorker

# the rate of free memory in jvm.
pixels.gc.threshold=0.3

# pixels cache
cache.location=/mnt/ramfs/pixels.cache
cache.size=102400000
index.location=/mnt/ramfs/pixels.index
index.size=102400000
cache.storage.scheme=hdfs
cache.schema=pixels
cache.table=test_105
# lease ttl must be larger than heartbeat period
lease.ttl.seconds=20
# heartbeat period must be larger than 0
heartbeat.period.seconds=10
# set to false if storage.scheme is S3
enable.absolute.balancer=false
cache.enabled=false
cache.read.direct=false
