// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.retina.util.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ByteColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static ByteColumnVectorFlat getRootAsByteColumnVectorFlat(ByteBuffer _bb) { return getRootAsByteColumnVectorFlat(_bb, new ByteColumnVectorFlat()); }
  public static ByteColumnVectorFlat getRootAsByteColumnVectorFlat(ByteBuffer _bb, ByteColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ByteColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte vector(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int vectorLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector vectorVector() { return vectorVector(new ByteVector()); }
  public ByteVector vectorVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer vectorAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer vectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createByteColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      int vectorOffset) {
    builder.startTable(2);
    ByteColumnVectorFlat.addVector(builder, vectorOffset);
    ByteColumnVectorFlat.addBase(builder, baseOffset);
    return ByteColumnVectorFlat.endByteColumnVectorFlat(builder);
  }

  public static void startByteColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addVector(FlatBufferBuilder builder, int vectorOffset) { builder.addOffset(1, vectorOffset, 0); }
  public static int createVectorVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createVectorVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startVectorVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endByteColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ByteColumnVectorFlat get(int j) { return get(new ByteColumnVectorFlat(), j); }
    public ByteColumnVectorFlat get(ByteColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

