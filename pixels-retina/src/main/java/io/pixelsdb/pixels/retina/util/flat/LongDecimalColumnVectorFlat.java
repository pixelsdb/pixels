// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.retina.util.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LongDecimalColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static LongDecimalColumnVectorFlat getRootAsLongDecimalColumnVectorFlat(ByteBuffer _bb) { return getRootAsLongDecimalColumnVectorFlat(_bb, new LongDecimalColumnVectorFlat()); }
  public static LongDecimalColumnVectorFlat getRootAsLongDecimalColumnVectorFlat(ByteBuffer _bb, LongDecimalColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LongDecimalColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long vector() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int precision() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int scale() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createLongDecimalColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      long vector,
      int precision,
      int scale) {
    builder.startTable(4);
    LongDecimalColumnVectorFlat.addVector(builder, vector);
    LongDecimalColumnVectorFlat.addScale(builder, scale);
    LongDecimalColumnVectorFlat.addPrecision(builder, precision);
    LongDecimalColumnVectorFlat.addBase(builder, baseOffset);
    return LongDecimalColumnVectorFlat.endLongDecimalColumnVectorFlat(builder);
  }

  public static void startLongDecimalColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addVector(FlatBufferBuilder builder, long vector) { builder.addLong(1, vector, 0L); }
  public static void addPrecision(FlatBufferBuilder builder, int precision) { builder.addInt(2, precision, 0); }
  public static void addScale(FlatBufferBuilder builder, int scale) { builder.addInt(3, scale, 0); }
  public static int endLongDecimalColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LongDecimalColumnVectorFlat get(int j) { return get(new LongDecimalColumnVectorFlat(), j); }
    public LongDecimalColumnVectorFlat get(LongDecimalColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

