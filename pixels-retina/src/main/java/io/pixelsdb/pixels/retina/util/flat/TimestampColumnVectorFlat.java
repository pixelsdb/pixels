// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.retina.util.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TimestampColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static TimestampColumnVectorFlat getRootAsTimestampColumnVectorFlat(ByteBuffer _bb) { return getRootAsTimestampColumnVectorFlat(_bb, new TimestampColumnVectorFlat()); }
  public static TimestampColumnVectorFlat getRootAsTimestampColumnVectorFlat(ByteBuffer _bb, TimestampColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TimestampColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int precision() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long times(int j) { int o = __offset(8); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public LongVector timesVector() { return timesVector(new LongVector()); }
  public LongVector timesVector(LongVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timesAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer timesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }

  public static int createTimestampColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      int precision,
      int timesOffset) {
    builder.startTable(3);
    TimestampColumnVectorFlat.addTimes(builder, timesOffset);
    TimestampColumnVectorFlat.addPrecision(builder, precision);
    TimestampColumnVectorFlat.addBase(builder, baseOffset);
    return TimestampColumnVectorFlat.endTimestampColumnVectorFlat(builder);
  }

  public static void startTimestampColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addPrecision(FlatBufferBuilder builder, int precision) { builder.addInt(1, precision, 0); }
  public static void addTimes(FlatBufferBuilder builder, int timesOffset) { builder.addOffset(2, timesOffset, 0); }
  public static int createTimesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endTimestampColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TimestampColumnVectorFlat get(int j) { return get(new TimestampColumnVectorFlat(), j); }
    public TimestampColumnVectorFlat get(TimestampColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

