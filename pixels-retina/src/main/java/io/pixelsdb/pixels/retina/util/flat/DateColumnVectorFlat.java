// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.retina.util.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DateColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static DateColumnVectorFlat getRootAsDateColumnVectorFlat(ByteBuffer _bb) { return getRootAsDateColumnVectorFlat(_bb, new DateColumnVectorFlat()); }
  public static DateColumnVectorFlat getRootAsDateColumnVectorFlat(ByteBuffer _bb, DateColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DateColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.retina.util.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int dates(int j) { int o = __offset(6); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int datesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public IntVector datesVector() { return datesVector(new IntVector()); }
  public IntVector datesVector(IntVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer datesAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer datesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }

  public static int createDateColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      int datesOffset) {
    builder.startTable(2);
    DateColumnVectorFlat.addDates(builder, datesOffset);
    DateColumnVectorFlat.addBase(builder, baseOffset);
    return DateColumnVectorFlat.endDateColumnVectorFlat(builder);
  }

  public static void startDateColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addDates(FlatBufferBuilder builder, int datesOffset) { builder.addOffset(1, datesOffset, 0); }
  public static int createDatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startDatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDateColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DateColumnVectorFlat get(int j) { return get(new DateColumnVectorFlat(), j); }
    public DateColumnVectorFlat get(DateColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

