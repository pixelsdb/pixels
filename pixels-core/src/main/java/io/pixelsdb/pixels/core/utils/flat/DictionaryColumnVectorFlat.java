// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.core.utils.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DictionaryColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static DictionaryColumnVectorFlat getRootAsDictionaryColumnVectorFlat(ByteBuffer _bb) { return getRootAsDictionaryColumnVectorFlat(_bb, new DictionaryColumnVectorFlat()); }
  public static DictionaryColumnVectorFlat getRootAsDictionaryColumnVectorFlat(ByteBuffer _bb, DictionaryColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DictionaryColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte dictArray(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int dictArrayLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector dictArrayVector() { return dictArrayVector(new ByteVector()); }
  public ByteVector dictArrayVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer dictArrayAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer dictArrayInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int dictOffsets(int j) { int o = __offset(8); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int dictOffsetsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public IntVector dictOffsetsVector() { return dictOffsetsVector(new IntVector()); }
  public IntVector dictOffsetsVector(IntVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer dictOffsetsAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer dictOffsetsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }
  public int ids(int j) { int o = __offset(10); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int idsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector idsVector() { return idsVector(new IntVector()); }
  public IntVector idsVector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer idsAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer idsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }

  public static int createDictionaryColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      int dictArrayOffset,
      int dictOffsetsOffset,
      int idsOffset) {
    builder.startTable(4);
    DictionaryColumnVectorFlat.addIds(builder, idsOffset);
    DictionaryColumnVectorFlat.addDictOffsets(builder, dictOffsetsOffset);
    DictionaryColumnVectorFlat.addDictArray(builder, dictArrayOffset);
    DictionaryColumnVectorFlat.addBase(builder, baseOffset);
    return DictionaryColumnVectorFlat.endDictionaryColumnVectorFlat(builder);
  }

  public static void startDictionaryColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addDictArray(FlatBufferBuilder builder, int dictArrayOffset) { builder.addOffset(1, dictArrayOffset, 0); }
  public static int createDictArrayVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createDictArrayVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startDictArrayVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addDictOffsets(FlatBufferBuilder builder, int dictOffsetsOffset) { builder.addOffset(2, dictOffsetsOffset, 0); }
  public static int createDictOffsetsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startDictOffsetsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIds(FlatBufferBuilder builder, int idsOffset) { builder.addOffset(3, idsOffset, 0); }
  public static int createIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDictionaryColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DictionaryColumnVectorFlat get(int j) { return get(new DictionaryColumnVectorFlat(), j); }
    public DictionaryColumnVectorFlat get(DictionaryColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

