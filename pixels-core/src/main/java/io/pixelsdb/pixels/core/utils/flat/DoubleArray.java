// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.core.utils.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DoubleArray extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static DoubleArray getRootAsDoubleArray(ByteBuffer _bb) { return getRootAsDoubleArray(_bb, new DoubleArray()); }
  public static DoubleArray getRootAsDoubleArray(ByteBuffer _bb, DoubleArray obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DoubleArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double doubles(int j) { int o = __offset(4); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int doublesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector doublesVector() { return doublesVector(new DoubleVector()); }
  public DoubleVector doublesVector(DoubleVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer doublesAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public ByteBuffer doublesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 8); }

  public static int createDoubleArray(FlatBufferBuilder builder,
      int doublesOffset) {
    builder.startTable(1);
    DoubleArray.addDoubles(builder, doublesOffset);
    return DoubleArray.endDoubleArray(builder);
  }

  public static void startDoubleArray(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addDoubles(FlatBufferBuilder builder, int doublesOffset) { builder.addOffset(0, doublesOffset, 0); }
  public static int createDoublesVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startDoublesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endDoubleArray(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DoubleArray get(int j) { return get(new DoubleArray(), j); }
    public DoubleArray get(DoubleArray obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

