// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.core.utils.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class VectorizedRowBatchFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static VectorizedRowBatchFlat getRootAsVectorizedRowBatchFlat(ByteBuffer _bb) { return getRootAsVectorizedRowBatchFlat(_bb, new VectorizedRowBatchFlat()); }
  public static VectorizedRowBatchFlat getRootAsVectorizedRowBatchFlat(ByteBuffer _bb, VectorizedRowBatchFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VectorizedRowBatchFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int numCols() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte colsType(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int colsTypeLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector colsTypeVector() { return colsTypeVector(new ByteVector()); }
  public ByteVector colsTypeVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer colsTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer colsTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public Table cols(Table obj, int j) { int o = __offset(8); return o != 0 ? __union(obj, __vector(o) + j * 4) : null; }
  public int colsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public UnionVector colsVector() { return colsVector(new UnionVector()); }
  public UnionVector colsVector(UnionVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int size() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int projectionSize() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int maxSize() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long memoryUsage() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean endOfFile() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createVectorizedRowBatchFlat(FlatBufferBuilder builder,
      int numCols,
      int colsTypeOffset,
      int colsOffset,
      int size,
      int projectionSize,
      int maxSize,
      long memoryUsage,
      boolean endOfFile) {
    builder.startTable(8);
    VectorizedRowBatchFlat.addMemoryUsage(builder, memoryUsage);
    VectorizedRowBatchFlat.addMaxSize(builder, maxSize);
    VectorizedRowBatchFlat.addProjectionSize(builder, projectionSize);
    VectorizedRowBatchFlat.addSize(builder, size);
    VectorizedRowBatchFlat.addCols(builder, colsOffset);
    VectorizedRowBatchFlat.addColsType(builder, colsTypeOffset);
    VectorizedRowBatchFlat.addNumCols(builder, numCols);
    VectorizedRowBatchFlat.addEndOfFile(builder, endOfFile);
    return VectorizedRowBatchFlat.endVectorizedRowBatchFlat(builder);
  }

  public static void startVectorizedRowBatchFlat(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addNumCols(FlatBufferBuilder builder, int numCols) { builder.addInt(0, numCols, 0); }
  public static void addColsType(FlatBufferBuilder builder, int colsTypeOffset) { builder.addOffset(1, colsTypeOffset, 0); }
  public static int createColsTypeVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startColsTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addCols(FlatBufferBuilder builder, int colsOffset) { builder.addOffset(2, colsOffset, 0); }
  public static int createColsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSize(FlatBufferBuilder builder, int size) { builder.addInt(3, size, 0); }
  public static void addProjectionSize(FlatBufferBuilder builder, int projectionSize) { builder.addInt(4, projectionSize, 0); }
  public static void addMaxSize(FlatBufferBuilder builder, int maxSize) { builder.addInt(5, maxSize, 0); }
  public static void addMemoryUsage(FlatBufferBuilder builder, long memoryUsage) { builder.addLong(6, memoryUsage, 0L); }
  public static void addEndOfFile(FlatBufferBuilder builder, boolean endOfFile) { builder.addBoolean(7, endOfFile, false); }
  public static int endVectorizedRowBatchFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VectorizedRowBatchFlat get(int j) { return get(new VectorizedRowBatchFlat(), j); }
    public VectorizedRowBatchFlat get(VectorizedRowBatchFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

