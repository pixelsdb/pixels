// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.core.utils.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ColumnVectorBaseFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static ColumnVectorBaseFlat getRootAsColumnVectorBaseFlat(ByteBuffer _bb) { return getRootAsColumnVectorBaseFlat(_bb, new ColumnVectorBaseFlat()); }
  public static ColumnVectorBaseFlat getRootAsColumnVectorBaseFlat(ByteBuffer _bb, ColumnVectorBaseFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ColumnVectorBaseFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int length() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int writeIndex() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long memoryUsage() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean isRepeating() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean duplicated() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int originVecId() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean isNull(int j) { int o = __offset(16); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int isNullLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public BooleanVector isNullVector() { return isNullVector(new BooleanVector()); }
  public BooleanVector isNullVector(BooleanVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer isNullAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer isNullInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public boolean noNulls() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean preFlattenIsRepeating() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean preFlattenNoNulls() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createColumnVectorBaseFlat(FlatBufferBuilder builder,
      int length,
      int writeIndex,
      long memoryUsage,
      boolean isRepeating,
      boolean duplicated,
      int originVecId,
      int isNullOffset,
      boolean noNulls,
      boolean preFlattenIsRepeating,
      boolean preFlattenNoNulls) {
    builder.startTable(10);
    ColumnVectorBaseFlat.addMemoryUsage(builder, memoryUsage);
    ColumnVectorBaseFlat.addIsNull(builder, isNullOffset);
    ColumnVectorBaseFlat.addOriginVecId(builder, originVecId);
    ColumnVectorBaseFlat.addWriteIndex(builder, writeIndex);
    ColumnVectorBaseFlat.addLength(builder, length);
    ColumnVectorBaseFlat.addPreFlattenNoNulls(builder, preFlattenNoNulls);
    ColumnVectorBaseFlat.addPreFlattenIsRepeating(builder, preFlattenIsRepeating);
    ColumnVectorBaseFlat.addNoNulls(builder, noNulls);
    ColumnVectorBaseFlat.addDuplicated(builder, duplicated);
    ColumnVectorBaseFlat.addIsRepeating(builder, isRepeating);
    return ColumnVectorBaseFlat.endColumnVectorBaseFlat(builder);
  }

  public static void startColumnVectorBaseFlat(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addLength(FlatBufferBuilder builder, int length) { builder.addInt(0, length, 0); }
  public static void addWriteIndex(FlatBufferBuilder builder, int writeIndex) { builder.addInt(1, writeIndex, 0); }
  public static void addMemoryUsage(FlatBufferBuilder builder, long memoryUsage) { builder.addLong(2, memoryUsage, 0L); }
  public static void addIsRepeating(FlatBufferBuilder builder, boolean isRepeating) { builder.addBoolean(3, isRepeating, false); }
  public static void addDuplicated(FlatBufferBuilder builder, boolean duplicated) { builder.addBoolean(4, duplicated, false); }
  public static void addOriginVecId(FlatBufferBuilder builder, int originVecId) { builder.addInt(5, originVecId, 0); }
  public static void addIsNull(FlatBufferBuilder builder, int isNullOffset) { builder.addOffset(6, isNullOffset, 0); }
  public static int createIsNullVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startIsNullVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addNoNulls(FlatBufferBuilder builder, boolean noNulls) { builder.addBoolean(7, noNulls, false); }
  public static void addPreFlattenIsRepeating(FlatBufferBuilder builder, boolean preFlattenIsRepeating) { builder.addBoolean(8, preFlattenIsRepeating, false); }
  public static void addPreFlattenNoNulls(FlatBufferBuilder builder, boolean preFlattenNoNulls) { builder.addBoolean(9, preFlattenNoNulls, false); }
  public static int endColumnVectorBaseFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ColumnVectorBaseFlat get(int j) { return get(new ColumnVectorBaseFlat(), j); }
    public ColumnVectorBaseFlat get(ColumnVectorBaseFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

