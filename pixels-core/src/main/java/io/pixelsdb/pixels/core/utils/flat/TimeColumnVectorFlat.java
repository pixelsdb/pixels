// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.core.utils.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TimeColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static TimeColumnVectorFlat getRootAsTimeColumnVectorFlat(ByteBuffer _bb) { return getRootAsTimeColumnVectorFlat(_bb, new TimeColumnVectorFlat()); }
  public static TimeColumnVectorFlat getRootAsTimeColumnVectorFlat(ByteBuffer _bb, TimeColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TimeColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int times(int j) { int o = __offset(6); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int timesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public IntVector timesVector() { return timesVector(new IntVector()); }
  public IntVector timesVector(IntVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timesAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer timesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }
  public int precision() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long scratchTime() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createTimeColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      int timesOffset,
      int precision,
      long scratchTime) {
    builder.startTable(4);
    TimeColumnVectorFlat.addScratchTime(builder, scratchTime);
    TimeColumnVectorFlat.addPrecision(builder, precision);
    TimeColumnVectorFlat.addTimes(builder, timesOffset);
    TimeColumnVectorFlat.addBase(builder, baseOffset);
    return TimeColumnVectorFlat.endTimeColumnVectorFlat(builder);
  }

  public static void startTimeColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addTimes(FlatBufferBuilder builder, int timesOffset) { builder.addOffset(1, timesOffset, 0); }
  public static int createTimesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPrecision(FlatBufferBuilder builder, int precision) { builder.addInt(2, precision, 0); }
  public static void addScratchTime(FlatBufferBuilder builder, long scratchTime) { builder.addLong(3, scratchTime, 0L); }
  public static int endTimeColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TimeColumnVectorFlat get(int j) { return get(new TimeColumnVectorFlat(), j); }
    public TimeColumnVectorFlat get(TimeColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

