// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.core.utils.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BinaryColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static BinaryColumnVectorFlat getRootAsBinaryColumnVectorFlat(ByteBuffer _bb) { return getRootAsBinaryColumnVectorFlat(_bb, new BinaryColumnVectorFlat()); }
  public static BinaryColumnVectorFlat getRootAsBinaryColumnVectorFlat(ByteBuffer _bb, BinaryColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BinaryColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.pixelsdb.pixels.core.utils.flat.ByteArray vector(int j) { return vector(new io.pixelsdb.pixels.core.utils.flat.ByteArray(), j); }
  public io.pixelsdb.pixels.core.utils.flat.ByteArray vector(io.pixelsdb.pixels.core.utils.flat.ByteArray obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int vectorLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public io.pixelsdb.pixels.core.utils.flat.ByteArray.Vector vectorVector() { return vectorVector(new io.pixelsdb.pixels.core.utils.flat.ByteArray.Vector()); }
  public io.pixelsdb.pixels.core.utils.flat.ByteArray.Vector vectorVector(io.pixelsdb.pixels.core.utils.flat.ByteArray.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int start(int j) { int o = __offset(8); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int startLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public IntVector startVector() { return startVector(new IntVector()); }
  public IntVector startVector(IntVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer startAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer startInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }
  public int lens(int j) { int o = __offset(10); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int lensLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector lensVector() { return lensVector(new IntVector()); }
  public IntVector lensVector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer lensAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer lensInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public byte buffer(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int bufferLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bufferVector() { return bufferVector(new ByteVector()); }
  public ByteVector bufferVector(ByteVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bufferAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer bufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public int nextFree() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte smallBuffer(int j) { int o = __offset(16); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int smallBufferLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector smallBufferVector() { return smallBufferVector(new ByteVector()); }
  public ByteVector smallBufferVector(ByteVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer smallBufferAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer smallBufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public int smallBufferNextFree() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int bufferAllocationCount() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createBinaryColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      int vectorOffset,
      int startOffset,
      int lensOffset,
      int bufferOffset,
      int nextFree,
      int smallBufferOffset,
      int smallBufferNextFree,
      int bufferAllocationCount) {
    builder.startTable(9);
    BinaryColumnVectorFlat.addBufferAllocationCount(builder, bufferAllocationCount);
    BinaryColumnVectorFlat.addSmallBufferNextFree(builder, smallBufferNextFree);
    BinaryColumnVectorFlat.addSmallBuffer(builder, smallBufferOffset);
    BinaryColumnVectorFlat.addNextFree(builder, nextFree);
    BinaryColumnVectorFlat.addBuffer(builder, bufferOffset);
    BinaryColumnVectorFlat.addLens(builder, lensOffset);
    BinaryColumnVectorFlat.addStart(builder, startOffset);
    BinaryColumnVectorFlat.addVector(builder, vectorOffset);
    BinaryColumnVectorFlat.addBase(builder, baseOffset);
    return BinaryColumnVectorFlat.endBinaryColumnVectorFlat(builder);
  }

  public static void startBinaryColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addVector(FlatBufferBuilder builder, int vectorOffset) { builder.addOffset(1, vectorOffset, 0); }
  public static int createVectorVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVectorVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStart(FlatBufferBuilder builder, int startOffset) { builder.addOffset(2, startOffset, 0); }
  public static int createStartVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startStartVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLens(FlatBufferBuilder builder, int lensOffset) { builder.addOffset(3, lensOffset, 0); }
  public static int createLensVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startLensVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBuffer(FlatBufferBuilder builder, int bufferOffset) { builder.addOffset(4, bufferOffset, 0); }
  public static int createBufferVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBufferVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addNextFree(FlatBufferBuilder builder, int nextFree) { builder.addInt(5, nextFree, 0); }
  public static void addSmallBuffer(FlatBufferBuilder builder, int smallBufferOffset) { builder.addOffset(6, smallBufferOffset, 0); }
  public static int createSmallBufferVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createSmallBufferVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startSmallBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addSmallBufferNextFree(FlatBufferBuilder builder, int smallBufferNextFree) { builder.addInt(7, smallBufferNextFree, 0); }
  public static void addBufferAllocationCount(FlatBufferBuilder builder, int bufferAllocationCount) { builder.addInt(8, bufferAllocationCount, 0); }
  public static int endBinaryColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BinaryColumnVectorFlat get(int j) { return get(new BinaryColumnVectorFlat(), j); }
    public BinaryColumnVectorFlat get(BinaryColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

