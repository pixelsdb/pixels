// automatically generated by the FlatBuffers compiler, do not modify

package io.pixelsdb.pixels.core.utils.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class VectorColumnVectorFlat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static VectorColumnVectorFlat getRootAsVectorColumnVectorFlat(ByteBuffer _bb) { return getRootAsVectorColumnVectorFlat(_bb, new VectorColumnVectorFlat()); }
  public static VectorColumnVectorFlat getRootAsVectorColumnVectorFlat(ByteBuffer _bb, VectorColumnVectorFlat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VectorColumnVectorFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base() { return base(new io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat()); }
  public io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat base(io.pixelsdb.pixels.core.utils.flat.ColumnVectorBaseFlat obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public io.pixelsdb.pixels.core.utils.flat.DoubleArray vector(int j) { return vector(new io.pixelsdb.pixels.core.utils.flat.DoubleArray(), j); }
  public io.pixelsdb.pixels.core.utils.flat.DoubleArray vector(io.pixelsdb.pixels.core.utils.flat.DoubleArray obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int vectorLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public io.pixelsdb.pixels.core.utils.flat.DoubleArray.Vector vectorVector() { return vectorVector(new io.pixelsdb.pixels.core.utils.flat.DoubleArray.Vector()); }
  public io.pixelsdb.pixels.core.utils.flat.DoubleArray.Vector vectorVector(io.pixelsdb.pixels.core.utils.flat.DoubleArray.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int dimension() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createVectorColumnVectorFlat(FlatBufferBuilder builder,
      int baseOffset,
      int vectorOffset,
      int dimension) {
    builder.startTable(3);
    VectorColumnVectorFlat.addDimension(builder, dimension);
    VectorColumnVectorFlat.addVector(builder, vectorOffset);
    VectorColumnVectorFlat.addBase(builder, baseOffset);
    return VectorColumnVectorFlat.endVectorColumnVectorFlat(builder);
  }

  public static void startVectorColumnVectorFlat(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addBase(FlatBufferBuilder builder, int baseOffset) { builder.addOffset(0, baseOffset, 0); }
  public static void addVector(FlatBufferBuilder builder, int vectorOffset) { builder.addOffset(1, vectorOffset, 0); }
  public static int createVectorVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVectorVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDimension(FlatBufferBuilder builder, int dimension) { builder.addInt(2, dimension, 0); }
  public static int endVectorColumnVectorFlat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VectorColumnVectorFlat get(int j) { return get(new VectorColumnVectorFlat(), j); }
    public VectorColumnVectorFlat get(VectorColumnVectorFlat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

