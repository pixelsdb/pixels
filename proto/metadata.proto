/*
 * Copyright 2019 PixelsDB.
 *
 * This file is part of Pixels.
 *
 * Pixels is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Pixels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Affero GNU General Public License for more details.
 *
 * You should have received a copy of the Affero GNU General Public
 * License along with Pixels.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

// grpc protocol for pixels metadata.

syntax = "proto3";

option java_multiple_files = false;
option java_package = "io.pixelsdb.pixels.daemon";
option java_outer_classname = "MetadataProto";

package metadata.proto;

// The metadata services definition.
service MetadataService {
    rpc CreateSchema (CreateSchemaRequest) returns (CreateSchemaResponse);
    rpc ExistSchema (ExistSchemaRequest) returns (ExistSchemaResponse);
    rpc GetSchemas (GetSchemasRequest) returns (GetSchemasResponse);
    rpc DropSchema (DropSchemaRequest) returns (DropSchemaResponse);
    rpc CreateTable (CreateTableRequest) returns (CreateTableResponse);
    rpc ExistTable (ExistTableRequest) returns (ExistTableResponse);
    rpc GetTable (GetTableRequest) returns (GetTableResponse);
    rpc GetTables (GetTablesRequest) returns (GetTablesResponse);
    rpc UpdateRowCount (UpdateRowCountRequest) returns (UpdateRowCountResponse);
    rpc DropTable (DropTableRequest) returns (DropTableResponse);
    rpc AddLayout (AddLayoutRequest) returns (AddLayoutResponse);
    rpc GetLayouts (GetLayoutsRequest) returns (GetLayoutsResponse);
    rpc GetLayout (GetLayoutRequest) returns (GetLayoutResponse);
    rpc UpdateLayout (UpdateLayoutRequest) returns (UpdateLayoutResponse);
    rpc GetColumns (GetColumnsRequest) returns (GetColumnsResponse);
    rpc UpdateColumn (UpdateColumnRequest) returns (UpdateColumnResponse);
    rpc CreateView (CreateViewRequest) returns (CreateViewResponse);
    rpc ExistView (ExistViewRequest) returns (ExistViewResponse);
    rpc GetViews (GetViewsRequest) returns (GetViewsResponse);
    rpc GetView (GetViewRequest) returns (GetViewResponse);
    rpc DropView (DropViewRequest) returns (DropViewResponse);
}

// begin domain objects definition
message Schema {
    uint64 id = 1;
    string name = 2;
    string desc = 3;
    repeated uint64 tableIds = 4;
}

message Table {
    uint64 id = 1;
    string name = 2;
    string type = 3;
    string storageScheme = 4;
    uint64 rowCount = 5;
    uint64 schemaId = 6;
    repeated uint64 columnIds = 7;
}

message Column {
    uint64 id = 1;
    string name = 2;
    string type = 3;
    double chunkSize = 4;
    double size = 5;
    double nullFraction = 6;
    uint64 cardinality = 7;
    bytes recordStats = 8;
    uint64 tableId = 9;
}

message Layout {
    uint64 id = 1;
    uint32 version = 2;
    uint64 createAt = 3;
    enum Permission {
        DISABLED = 0;
        READ_ONLY = 1;
        READ_WRITE = 2;
    }
    Permission permission = 4;
    string order = 5;
    string orderPath = 6;
    string compact = 7;
    string compactPath = 8;
    string splits = 9;
    string projections = 10;
    uint64 tableId = 11;
}

message View {
    uint64 id = 1;
    string name = 2;
    string type = 3;
    string data = 4;
    uint64 schemaId = 5;
}
// end domain objects definitions

// begin request/response definition for rpc services

// header
message RequestHeader {
    string token = 1;
}

message ResponseHeader {
    string token = 1;
    int32 errorCode = 2; // errorCode == 0 means success
    string errorMsg = 3; // empty if errorCode == 0
}

// schema
message GetSchemasRequest {
    RequestHeader header = 1;
}

message GetSchemasResponse {
    ResponseHeader header = 1;
    repeated Schema schemas = 2;
}

message CreateSchemaRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string schemaDesc = 3;
}

message CreateSchemaResponse {
    ResponseHeader header = 1;
}

message ExistSchemaRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message ExistSchemaResponse {
    ResponseHeader header = 1;
    bool exists = 2;
}

message DropSchemaRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message DropSchemaResponse {
    ResponseHeader header = 1;
}

// table
message GetTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message GetTableResponse {
    ResponseHeader header = 1;
    Table table = 2;
}

message GetTablesRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message GetTablesResponse {
    ResponseHeader header = 1;
    repeated Table tables = 2;
}

message ExistTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message ExistTableResponse {
    ResponseHeader header = 1;
    bool exists = 2;
}

message CreateTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    string storageScheme = 4;
    repeated Column columns = 5;
}

message CreateTableResponse {
    ResponseHeader header = 1;
}

message UpdateRowCountRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    uint64 rowCount = 4;
}

message UpdateRowCountResponse {
    ResponseHeader header = 1;
}

message DropTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message DropTableResponse {
    ResponseHeader header = 1;
}

// column
message GetColumnsRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    bool withStatistics = 4;
}

message GetColumnsResponse {
    ResponseHeader header = 1;
    repeated Column columns = 2;
}

message UpdateColumnRequest {
    RequestHeader header = 1;
    Column column = 2;
}

message UpdateColumnResponse {
    ResponseHeader header = 1;
}

// layout
message GetLayoutsRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message GetLayoutsResponse {
    ResponseHeader header = 1;
    repeated Layout layouts = 2;
}

message GetLayoutRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    uint32 version = 4; // if version = -1, get the latest version
    enum PermissionRange {
        ALL = 0;
        READABLE = 1;
        READ_WRITE = 2;
    }
    PermissionRange permissionRange = 5;
}

message GetLayoutResponse {
    ResponseHeader header = 1;
    Layout layout = 2;
}

message AddLayoutRequest {
    RequestHeader header = 1;
    Layout layout = 2;
}

message AddLayoutResponse {
    ResponseHeader header = 1;
}

message UpdateLayoutRequest {
    RequestHeader header = 1;
    Layout layout = 2;
}

message UpdateLayoutResponse {
    ResponseHeader header = 1;
}

// view
message GetViewsRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message GetViewsResponse {
    ResponseHeader header = 1;
    repeated View views = 2;
}

message GetViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
}

message GetViewResponse {
    ResponseHeader header = 1;
    View view = 2;
}

message ExistViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
}

message ExistViewResponse {
    ResponseHeader header = 1;
    bool exists = 2;
}

message CreateViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
    string viewData = 4;
    bool updateIfExists = 5;
}

message CreateViewResponse {
    ResponseHeader header = 1;
}

message DropViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
}

message DropViewResponse {
    ResponseHeader header = 1;
}
// end request/response definition for rpc services