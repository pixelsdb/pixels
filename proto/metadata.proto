/*
 * Copyright 2019 PixelsDB.
 *
 * This file is part of Pixels.
 *
 * Pixels is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Pixels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Affero GNU General Public License for more details.
 *
 * You should have received a copy of the Affero GNU General Public
 * License along with Pixels.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

// grpc protocol for pixels metadata.

syntax = "proto3";

option java_multiple_files = false;
option java_package = "io.pixelsdb.pixels.daemon";
option java_outer_classname = "MetadataProto";

package metadata.proto;

// The metadata services definition.
service MetadataService {
    rpc CreateSchema (CreateSchemaRequest) returns (CreateSchemaResponse);
    rpc ExistSchema (ExistSchemaRequest) returns (ExistSchemaResponse);
    rpc GetSchemas (GetSchemasRequest) returns (GetSchemasResponse);
    rpc DropSchema (DropSchemaRequest) returns (DropSchemaResponse);
    rpc CreateTable (CreateTableRequest) returns (CreateTableResponse);
    rpc ExistTable (ExistTableRequest) returns (ExistTableResponse);
    rpc GetTable (GetTableRequest) returns (GetTableResponse);
    rpc GetTables (GetTablesRequest) returns (GetTablesResponse);
    rpc UpdateRowCount (UpdateRowCountRequest) returns (UpdateRowCountResponse);
    rpc DropTable (DropTableRequest) returns (DropTableResponse);
    rpc AddLayout (AddLayoutRequest) returns (AddLayoutResponse);
    rpc GetLayouts (GetLayoutsRequest) returns (GetLayoutsResponse);
    rpc GetLayout (GetLayoutRequest) returns (GetLayoutResponse);
    rpc UpdateLayout (UpdateLayoutRequest) returns (UpdateLayoutResponse);
    rpc AddRangeIndex (AddRangeIndexRequest) returns (AddRangeIndexResponse);
    rpc GetRangeIndex (GetRangeIndexRequest) returns (GetRangeIndexResponse);
    rpc UpdateRangeIndex (UpdateRangeIndexRequest) returns (UpdateRangeIndexResponse);
    rpc DeleteRangeIndex (DeleteRangeIndexRequest) returns (DeleteRangeIndexResponse);
    rpc AddRange (AddRangeRequest) returns (AddRangeResponse);
    rpc GetRange (GetRangeRequest) returns (GetRangeResponse);
    rpc GetRanges (GetRangesRequest) returns (GetRangesResponse);
    rpc DeleteRange (DeleteRangeRequest) returns (DeleteRangeResponse);
    rpc AddPath (AddPathRequest) returns (AddPathResponse);
    rpc GetPaths (GetPathsRequest) returns (GetPathsResponse);
    rpc UpdatePath (UpdatePathRequest) returns (UpdatePathResponse);
    rpc DeletePaths (DeletePathsRequest) returns (DeletePathsResponse);
    rpc AddFile (AddFileRequest) returns (AddFileResponse);
    rpc GetFiles (GetFilesRequest) returns (GetFilesResponse);
    rpc UpdateFile (UpdateFileRequest) returns (UpdateFileResponse);
    rpc DeleteFiles (DeleteFilesRequest) returns (DeleteFilesResponse);
    rpc CreatePeerPath (CreatePeerPathRequest) returns (CreatePeerPathResponse);
    rpc GetPeerPaths (GetPeerPathsRequest) returns (GetPeerPathsResponse);
    rpc UpdatePeerPath (UpdatePeerPathRequest) returns (UpdatePeerPathResponse);
    rpc DeletePeerPaths (DeletePeerPathsRequest) returns (DeletePeerPathsResponse);
    rpc CreatePeer (CreatePeerRequest) returns (CreatePeerResponse);
    rpc GetPeer (GetPeerRequest) returns (GetPeerResponse);
    rpc UpdatePeer (UpdatePeerRequest) returns (UpdatePeerResponse);
    rpc DeletePeer (DeletePeerRequest) returns (DeletePeerResponse);
    rpc GetColumns (GetColumnsRequest) returns (GetColumnsResponse);
    rpc UpdateColumn (UpdateColumnRequest) returns (UpdateColumnResponse);
    rpc CreateView (CreateViewRequest) returns (CreateViewResponse);
    rpc ExistView (ExistViewRequest) returns (ExistViewResponse);
    rpc GetViews (GetViewsRequest) returns (GetViewsResponse);
    rpc GetView (GetViewRequest) returns (GetViewResponse);
    rpc DropView (DropViewRequest) returns (DropViewResponse);
}

// begin domain objects definition
message Schema {
    uint64 id = 1;
    string name = 2;
    string desc = 3;
}

message Table {
    uint64 id = 1;
    string name = 2;
    string type = 3;
    string storageScheme = 4;
    uint64 rowCount = 5;
    uint64 schemaId = 6;
}

message Column {
    uint64 id = 1;
    string name = 2;
    string type = 3;
    double chunkSize = 4;
    double size = 5;
    double nullFraction = 6;
    uint64 cardinality = 7;
    bytes recordStats = 8;
    uint64 tableId = 9;
}

message Peer {
    uint64 id = 1;
    string name = 2;
    string location = 3;
    string host = 4;
    int32 port = 5;
    string storageScheme = 6;
}

message PeerPath {
    uint64 id = 1;
    string uri = 2;
    repeated Column columns = 3;
    uint64 pathId = 4;
    uint64 peerId = 5;
}

message RangeIndex {
    uint64 id = 1;
    bytes indexStruct = 2;
    string keyColumns = 3;
    uint64 tableId = 4;
    uint64 schemaVersionId = 5;
}

message Range {
    uint64 id = 1;
    bytes min = 2;
    bytes max = 3;
    optional uint64 parentId = 4;
    uint64 rangeIndexId = 5;
}

message Path {
    uint64 id = 1;
    string uri = 2;
    bool isCompact = 3;
    uint64 layoutId = 4;
    optional uint64 rangeId = 5;
}

message File {
    uint64 id = 1;
    string name = 2;
    optional string locality = 3;
    uint64 pathId = 4;
}

message SchemaVersion {
    uint64 id = 1;
    repeated Column columns = 2;
    uint64 transTs = 3;
    uint64 tableId = 4;
}

enum Permission {
    DISABLED = 0;
    READ_ONLY = 1;
    READ_WRITE = 2;
}

message Layout {
    uint64 id = 1;
    uint64 version = 2;
    uint64 createAt = 3;
    Permission permission = 4;
    string ordered = 5;
    repeated Path orderedPaths = 6;
    string compact = 7;
    repeated Path compactPaths = 8;
    string splits = 9;
    string projections = 10;
    uint64 tableId = 11;
    uint64 schemaVersionId = 12;
}

message View {
    uint64 id = 1;
    string name = 2;
    string type = 3;
    string data = 4;
    uint64 schemaId = 5;
}

message User {
    uint64 id = 1;
    string name = 2;
    string password = 3;
    string email = 4;
}

message UserHasSchema {
    uint64 userId = 1;
    uint64 schemaId = 2;
    Permission permission = 3;
}
// end domain objects definitions

// begin request/response definition for rpc services

// header
message RequestHeader {
    string token = 1;
}

message ResponseHeader {
    string token = 1;
    int32 errorCode = 2; // errorCode == 0 means success
    string errorMsg = 3; // empty if errorCode == 0
}

// schema
message GetSchemasRequest {
    RequestHeader header = 1;
}

message GetSchemasResponse {
    ResponseHeader header = 1;
    repeated Schema schemas = 2;
}

message CreateSchemaRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string schemaDesc = 3;
}

message CreateSchemaResponse {
    ResponseHeader header = 1;
}

message ExistSchemaRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message ExistSchemaResponse {
    ResponseHeader header = 1;
    bool exists = 2;
}

message DropSchemaRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message DropSchemaResponse {
    ResponseHeader header = 1;
}

// table
message GetTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message GetTableResponse {
    ResponseHeader header = 1;
    Table table = 2;
}

message GetTablesRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message GetTablesResponse {
    ResponseHeader header = 1;
    repeated Table tables = 2;
}

message ExistTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message ExistTableResponse {
    ResponseHeader header = 1;
    bool exists = 2;
}

message CreateTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    string storageScheme = 4;
    repeated string basePathUris = 5;
    repeated Column columns = 6;
}

message CreateTableResponse {
    ResponseHeader header = 1;
}

message UpdateRowCountRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    uint64 rowCount = 4;
}

message UpdateRowCountResponse {
    ResponseHeader header = 1;
}

message DropTableRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message DropTableResponse {
    ResponseHeader header = 1;
}

// column
message GetColumnsRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    bool withStatistics = 4;
}

message GetColumnsResponse {
    ResponseHeader header = 1;
    repeated Column columns = 2;
}

message UpdateColumnRequest {
    RequestHeader header = 1;
    Column column = 2;
}

message UpdateColumnResponse {
    ResponseHeader header = 1;
}

// layout
message GetLayoutsRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
}

message GetLayoutsResponse {
    ResponseHeader header = 1;
    repeated Layout layouts = 2;
}

message GetLayoutRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string tableName = 3;
    uint64 layoutVersion = 4; // if version = -1, get the latest version
    enum PermissionRange {
        ALL = 0;
        READABLE = 1;
        READ_WRITE = 2;
    }
    PermissionRange permissionRange = 5;
}

message GetLayoutResponse {
    ResponseHeader header = 1;
    Layout layout = 2;
}

message AddLayoutRequest {
    RequestHeader header = 1;
    Layout layout = 2;
}

message AddLayoutResponse {
    ResponseHeader header = 1;
}

message UpdateLayoutRequest {
    RequestHeader header = 1;
    Layout layout = 2;
}

message UpdateLayoutResponse {
    ResponseHeader header = 1;
}

// range index
message AddRangeIndexRequest {
    RequestHeader header = 1;
    RangeIndex rangeIndex = 2;
}

message AddRangeIndexResponse {
    ResponseHeader header = 1;
}

message GetRangeIndexRequest {
    RequestHeader header = 1;
    int64 tableId = 2;
}

message GetRangeIndexResponse {
    ResponseHeader header = 1;
    RangeIndex rangeIndex = 2;
}

message UpdateRangeIndexRequest {
    RequestHeader header = 1;
    RangeIndex rangeIndex = 2;
}

message UpdateRangeIndexResponse {
    ResponseHeader header = 1;
};

message DeleteRangeIndexRequest {
    RequestHeader header = 1;
    int64 tableId = 2;
}

message DeleteRangeIndexResponse {
    ResponseHeader header = 1;
};

// range
message AddRangeRequest {
    RequestHeader header = 1;
    Range range = 2;
}

message AddRangeResponse {
    ResponseHeader header = 1;
};

message GetRangeRequest {
    RequestHeader header = 1;
    int64 rangeId = 2;
}

message GetRangeResponse {
    ResponseHeader header = 1;
    Range range = 2;
}

message GetRangesRequest {
    RequestHeader header = 1;
    int64 rangeIndexId = 2;
}

message GetRangesResponse {
    ResponseHeader header = 1;
    repeated Range ranges = 2;
}

message DeleteRangeRequest {
    RequestHeader header = 1;
    int64 rangeId = 2;
}

message DeleteRangeResponse {
    ResponseHeader header = 1;
};

// peer
message CreatePeerRequest {
    RequestHeader header = 1;
    Peer peer = 2;
}

message CreatePeerResponse {
    ResponseHeader header = 1;
}

message GetPeerRequest {
    RequestHeader header = 1;
    oneof idOrName {
        uint64 id = 2;
        string name = 3;
    }
}

message GetPeerResponse {
    ResponseHeader header = 1;
    Peer peer = 2;
}

message UpdatePeerRequest {
    RequestHeader header = 1;
    Peer peer = 2;
}

message UpdatePeerResponse {
    ResponseHeader header = 1;
}

message DeletePeerRequest {
    RequestHeader header = 1;
    oneof idOrName {
        uint64 id = 2;
        string name = 3;
    }
}

message DeletePeerResponse {
    ResponseHeader header = 1;
}

// path
message AddPathRequest {
    RequestHeader header = 1;
    Path path = 2;
}

message AddPathResponse {
    ResponseHeader header = 1;
}

message GetPathsRequest {
    RequestHeader header = 1;
    oneof layoutOrRangeId {
        uint64 layoutId = 2;
        uint64 rangeId = 3;
    }
}

message GetPathsResponse {
    ResponseHeader header = 1;
    repeated Path paths = 2;
}

message UpdatePathRequest {
    RequestHeader header = 1;
    Path path = 2;
}

message UpdatePathResponse {
    ResponseHeader header = 1;
}

message DeletePathsRequest {
    RequestHeader header = 1;
    repeated uint64 pathIds = 2;
}

message DeletePathsResponse {
    ResponseHeader header = 1;
}

// file
message AddFileRequest {
    RequestHeader header = 1;
    File file = 2;
}

message AddFileResponse {
    ResponseHeader header = 1;
}

message GetFilesRequest {
    RequestHeader header = 1;
    uint64 pathId = 2;
}

message GetFilesResponse {
    ResponseHeader header = 1;
    repeated File files = 2;
}

message UpdateFileRequest {
    RequestHeader header = 1;
    File file = 2;
}

message UpdateFileResponse {
    ResponseHeader header = 1;
}

message DeleteFilesRequest {
    RequestHeader header = 1;
    repeated uint64 fileIds = 2;
}

message DeleteFilesResponse {
    ResponseHeader header = 1;
}

// peer path
message CreatePeerPathRequest {
    RequestHeader header = 1;
    PeerPath peerPath = 2;
}

message CreatePeerPathResponse {
    ResponseHeader header = 1;
}

message GetPeerPathsRequest {
    RequestHeader header = 1;
    oneof pathIdOrPeerId {
        uint64 pathId = 2;
        uint64 peerId = 3;
    }
}

message GetPeerPathsResponse {
    ResponseHeader header = 1;
    repeated PeerPath peerPaths = 2;
}

message UpdatePeerPathRequest {
    RequestHeader header = 1;
    uint64 peerPathId = 2;
    string uri = 3;
    repeated Column columns = 4;
}

message UpdatePeerPathResponse {
    ResponseHeader header = 1;
}

message DeletePeerPathsRequest {
    RequestHeader header = 1;
    repeated uint64 peerPathIds = 2;
}

message DeletePeerPathsResponse {
    ResponseHeader header = 1;
}

// view
message GetViewsRequest {
    RequestHeader header = 1;
    string schemaName = 2;
}

message GetViewsResponse {
    ResponseHeader header = 1;
    repeated View views = 2;
}

message GetViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
}

message GetViewResponse {
    ResponseHeader header = 1;
    View view = 2;
}

message ExistViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
}

message ExistViewResponse {
    ResponseHeader header = 1;
    bool exists = 2;
}

message CreateViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
    string viewData = 4;
    bool updateIfExists = 5;
}

message CreateViewResponse {
    ResponseHeader header = 1;
}

message DropViewRequest {
    RequestHeader header = 1;
    string schemaName = 2;
    string viewName = 3;
}

message DropViewResponse {
    ResponseHeader header = 1;
}
// end request/response definition for rpc services