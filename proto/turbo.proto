/*
 * Copyright 2023 PixelsDB.
 *
 * This file is part of Pixels.
 *
 * Pixels is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Pixels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Affero GNU General Public License for more details.
 *
 * You should have received a copy of the Affero GNU General Public
 * License along with Pixels.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

// grpc protocol for pixels-turbo.

syntax = "proto3";

option java_multiple_files = false;
option java_package = "io.pixelsdb.pixels.turbo";
option java_outer_classname = "TurboProto";

package turbo.proto;

// The service definitions for query scheduling in pixels-turbo.
service QueryScheduleService {
  rpc ScheduleQuery (ScheduleQueryRequest) returns (ScheduleQueryResponse);
  rpc FinishQuery (FinishQueryRequest) returns (FinishQueryResponse);
  rpc GetQuerySlots (GetQuerySlotsRequest) returns (GetQuerySlotsResponse);
  rpc GetQueryConcurrency (GetQueryConcurrencyRequest) returns (GetQueryConcurrencyResponse);
}

// begin request/response definition for query scheduling service

message ScheduleQueryRequest {
  uint64 transId = 1;
  bool forceMpp = 2;
}

message ScheduleQueryResponse {
  int32 errorCode = 1;
  string executorType = 2;
}

message FinishQueryRequest {
  uint64 transId = 1;
  string executorType = 2;
}

message FinishQueryResponse {
  int32 errorCode = 1;
}

message GetQuerySlotsRequest {
}

message GetQuerySlotsResponse {
  int32 errorCode = 1;
  uint32 mppSlots = 2;
  uint32 cfSlots = 3;
}

message GetQueryConcurrencyRequest {
}

message GetQueryConcurrencyResponse {
  int32 errorCode = 1;
  uint32 mppConcurrency = 2;
  uint32 cfConcurrency = 3;
}

// The service definitions for worker coordination, all requests are sent from worker to coordinator.
service WorkerCoordinateService {
  // also create a lease for the worker
  rpc RegisterWorker (RegisterWorkerRequest) returns (RegisterWorkerResponse);
  // get the downstream workers the execution outputs should be sent to
  rpc GetDownstreamWorkers (GetDownstreamWorkersRequest) returns (GetDownstreamWorkersResponse);
  // get a batch of tasks for the worker to execute
  rpc GetTasksToExecute (GetTasksToExecuteRequest) returns (GetTasksToExecuteResponse);
  // tell the coordinator that the tasks are completed
  rpc CompleteTasks (CompleteTasksRequest) returns (CompleteTasksResponse);
  // report heartbeat and extend the lease for a worker
  rpc ExtendLease (ExtendLeaseRequest) returns (ExtendLeaseResponse);
  // tell the coordinator that the worker is about to terminate and release the lease
  rpc TerminateWorker (TerminateWorkerRequest) returns (TerminateWorkerResponse);
}

message WorkerInfo {
  string ip = 1; // the ip address of the worker
  int32 port = 2; // the tcp port that the worker receives data streams from
  int64 transId = 3; // the id of the transaction (query)
  int32 stageId = 4; // the id of the stage in the operator this worker is working for
  string operatorName = 5; // the name of the operator this stage belongs to
  repeated int32 hashValues = 6; // in a hash-partitioned shuffle, the hash values to be processed by this worker
}

message RegisterWorkerRequest {
  WorkerInfo workerInfo = 1;
}

message RegisterWorkerResponse {
  int32 errorCode = 1;
  int32 workerPortIndex = 2; // the index of port this worker will write to down stream worker
  int64 workerId = 3; // the unique id assigned by the coordinator for this worker
  int64 leaseStartTimeMs = 4; // the time since the epoch in milliseconds of the lease
  int64 leasePeriodMs = 5; // the valid period in milliseconds of the lease
}

message GetDownstreamWorkersRequest {
  int64 workerId = 1;
}

message GetDownstreamWorkersResponse {
  int32 errorCode = 1;
  repeated WorkerInfo downstreamWorkers = 2;
}

message GetTasksToExecuteRequest {
  int64 workerId = 1;
}

message TaskInput {
  int32 taskId = 1;
  string payload = 2;
}

message TaskResult {
  int32 taskId = 1;
  bool success = 2;
}

message GetTasksToExecuteResponse {
  int32 errorCode = 1;
  repeated TaskInput taskInputs = 2;
}

message CompleteTasksRequest {
  int64 workerId = 1;
  repeated TaskResult taskResults = 2;
}

message CompleteTasksResponse {
  int32 errorCode = 1;
}

message ExtendLeaseRequest {
  int64 workerId = 1;
}

message ExtendLeaseResponse {
  int32 errorCode = 1;
  int64 leaseStartTimeMs = 2; // the new start time in milliseconds since the epoch
}

message TerminateWorkerRequest {
  int64 workerId = 1;
}

message TerminateWorkerResponse {
  int32 errorCode = 1;
}

// the service definitions for the serverless workers in vHive
service vHiveWorkerService {
  rpc Process (WorkerRequest) returns (WorkerResponse);
  rpc GetMemory (GetMemoryRequest) returns (GetMemoryResponse);
}

// begin request/response definition for vHive worker services
message WorkerRequest {
  string workerType = 1;
  string json = 2;
}

message WorkerResponse {
  string json = 1;
}

message GetMemoryRequest {
}

message GetMemoryResponse {
  uint64 memoryMB = 1;
}

service ScalingService {
  rpc CollectMetrics (stream CollectMetricsRequest) returns (stream CollectMetricsResponse);
  rpc CheckMetrics (CheckMetricsRequest) returns (CheckMetricsResponse);
}

message CollectMetricsRequest {
  uint32 queryConcurrency = 1;
}

message CollectMetricsResponse {
}

message CheckMetricsRequest {
}

message CheckMetricsResponse {
  string alarm_message = 1;
}