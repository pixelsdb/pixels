/*
 * Copyright 2022 PixelsDB.
 *
 * This file is part of Pixels.
 *
 * Pixels is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Pixels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Affero GNU General Public License for more details.
 *
 * You should have received a copy of the Affero GNU General Public
 * License along with Pixels.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

// grpc protocol for pixels transaction.

syntax = "proto3";

option java_multiple_files = false;
option java_package = "io.pixelsdb.pixels.daemon";
option java_outer_classname = "TransProto";

package transaction.proto;

// The transaction services definition.
service TransService {
    rpc BeginTrans (BeginTransRequest) returns (BeginTransResponse);
    rpc CommitTrans (CommitTransRequest) returns (CommitTransResponse);
    rpc RollbackTrans (RollbackTransRequest) returns (RollbackTransResponse);
    rpc GetTransContext (GetTransContextRequest) returns (GetTransContextResponse);
    rpc SetTransProperty (SetTransPropertyRequest) returns (SetTransPropertyResponse);
    rpc UpdateQueryCosts (UpdateQueryCostsRequest) returns (UpdateQueryCostsResponse);
    rpc GetTransConcurrency (GetTransConcurrencyRequest) returns (GetTransConcurrencyResponse);
    rpc BindExternalTraceId (BindExternalTraceIdRequest) returns (BindExternalTraceIdResponse);
}

// begin request/response definition for rpc services

// For performance considerations, we do not add header and error message to the
// requests and responses.

enum TransStatus {
    PENDING = 0;
    COMMIT = 1;
    ROLLBACK = 2;
}

message TransContext {
    uint64 transId = 1;
    uint64 timestamp = 2;
    bool readOnly = 3;
    TransStatus status = 4;
    map<string, string> properties = 5;
}

message BeginTransRequest {
    bool readOnly = 1;
}

message BeginTransResponse {
    int32 errorCode = 1;
    uint64 transId = 2;
    uint64 timestamp = 3;
}

message CommitTransRequest {
    uint64 transId = 1;
    uint64 timestamp = 2;
}

message CommitTransResponse {
    int32 errorCode = 1;
}

message RollbackTransRequest {
    uint64 transId = 1;
}

message RollbackTransResponse {
    int32 errorCode = 1;
}

message GetTransContextRequest {
    oneof lookupKey {
        string externalTraceId = 1;
        uint64 transId = 2;
    }
}

message GetTransContextResponse {
    int32 errorCode = 1;
    TransContext transContext = 2;
}

message SetTransPropertyRequest {
    oneof lookupKey {
        string externalTraceId = 1;
        uint64 transId = 2;
    }
    string key = 3;
    string value = 4;
}

message SetTransPropertyResponse {
    int32 errorCode = 1;
    optional string prevValue = 2;
}

message UpdateQueryCostsRequest {
    oneof lookupKey {
        string externalTraceId = 1;
        uint64 transId = 2;
    }
    // the new scan bytes to set
    double newScanBytes = 3;
    /*
     * Issue #649:
     * Specify addCostCents: vmCost or cfCost
     */
    oneof addCostCents {
        double addVMCostCents = 4;
        double addCFCostCents = 5;
    }
}

message UpdateQueryCostsResponse {
    int32 errorCode = 1;
}

message GetTransConcurrencyRequest {
    // true to lookup the concurrency of read only transactions;
    // false to lookup the concurrency of write transactions.
    bool readOnly = 1;
}

message GetTransConcurrencyResponse {
    int32 errorCode = 1;
    int32 concurrency = 2;
}

message BindExternalTraceIdRequest {
    uint64 transId = 1;
    string externalTraceId = 2;
}

message BindExternalTraceIdResponse {
    int32 errorCode = 1;
}

// end request/response definition for rpc services