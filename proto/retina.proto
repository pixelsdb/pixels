/*
 * Copyright 2024 PixelsDB.
 *
 * This file is part of Pixels.
 *
 * Pixels is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Pixels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Affero GNU General Public License for more details.
 *
 * You should have received a copy of the Affero GNU General Public
 * License along with Pixels.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

// grpc protocol for pixels-retina.

syntax = "proto3";

option java_multiple_files = false;
option java_package = "io.pixelsdb.pixels.retina";
option java_outer_classname = "RetinaProto";

package retina.proto;

// RetinaService and its related messages where from retina_service.proto
service RetinaWorkerService {
    rpc InsertRecord (InsertRecordRequest) returns (InsertRecordResponse);
    rpc InsertRecords (InsertRecordsRequest) returns (InsertRecordsResponse);
    rpc DeleteRecord (DeleteRecordRequest) returns (DeleteRecordResponse);
    rpc DeleteRecords (DeleteRecordsRequest) returns (DeleteRecordsResponse);
    rpc AddVisibility (AddVisibilityRequest) returns (AddVisibilityResponse);
    rpc QueryVisibility (QueryVisibilityRequest) returns (QueryVisibilityResponse);
    rpc GarbageCollect (GarbageCollectRequest) returns (GarbageCollectResponse);
}

// header
message RequestHeader {
    string token = 1;
}

message ResponseHeader {
    string token = 1;
    int32 errorCode = 2;  // errorCode == 0 means success
    string errorMsg = 3;  // empty if errorCode == 0
}

message VisibilityBitmap {
    repeated uint64 bitmap = 1;
}

message RowLocation {
    uint64 fileId = 1;   // the id of the file in pixels metadata, starts from 1
    uint32 rgId = 2;     // the index of the row group inside the file, starts from 0
    uint32 rgRowId = 3;  // the index of the row index the row group, starts from 0
}

message InsertData {
    string schema = 1;
    string table = 2;
    repeated bytes colValues = 3;
}

// insert
message InsertRecordRequest {
    RequestHeader header = 1;
    string schema = 2;
    string table = 3;
    repeated bytes colValues = 4;
    uint64 timestamp = 5;
}

message InsertRecordResponse {
    ResponseHeader header = 1;
}

message InsertRecordsRequest {
    RequestHeader header = 1;
    repeated InsertData data = 2;
    uint64 timestamp = 3;
}

message InsertRecordsResponse {
    ResponseHeader header = 1;
}

// delete
message DeleteRecordRequest {
    RequestHeader header = 1;
    uint64 fileId = 2;
    uint32 rgId = 3;
    uint32 rgRowId = 4;
    uint64 timestamp = 5;
}

message DeleteRecordResponse {
    ResponseHeader header = 1;
}

message DeleteRecordsRequest {
    RequestHeader header = 1;
    repeated RowLocation rows = 2;
    uint64 timestamp = 3;
}

message DeleteRecordsResponse {
    ResponseHeader header = 1;
}

// visibility
message AddVisibilityRequest {
    RequestHeader header = 1;
    string filePath = 2;
}

message AddVisibilityResponse {
    ResponseHeader header = 1;
}

message QueryVisibilityRequest {
    RequestHeader header = 1;
    string filePath = 2;
    repeated uint32 rgIds = 3;
    uint64 timestamp = 4;
}

message QueryVisibilityResponse {
    ResponseHeader header = 1;
    repeated VisibilityBitmap bitmaps = 2;
}

// garbage collection
message GarbageCollectRequest {
    RequestHeader header = 1;
    string filePath = 2;
    repeated uint32 rgIds = 3;
    uint64 timestamp = 4;
}

message GarbageCollectResponse {
    ResponseHeader header = 1;
}