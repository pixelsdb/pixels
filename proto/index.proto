/*
 * Copyright 2025 PixelsDB.
 *
 * This file is part of Pixels.
 *
 * Pixels is free software: you can redistribute it and/or modify
 * it under the terms of the Affero GNU General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Pixels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Affero GNU General Public License for more details.
 *
 * You should have received a copy of the Affero GNU General Public
 * License along with Pixels.  If not, see
 * <https://www.gnu.org/licenses/>.
 */

// grpc protocol for pixels-index.

syntax = "proto3";

option java_multiple_files = false;
option java_package = "io.pixelsdb.pixels.index";
option java_outer_classname = "IndexProto";

package index.proto;

// The index services definition.
service IndexService {
  rpc AllocateRowIdBatch (AllocateRowIdBatchRequest) returns (AllocateRowIdBatchResponse);
  rpc LookupUniqueIndex (LookupUniqueIndexRequest) returns (LookupUniqueIndexResponse);
  rpc LookupNonUniqueIndex (LookupNonUniqueIndexRequest) returns (LookupNonUniqueIndexResponse);
  rpc PutPrimaryIndexEntry (PutPrimaryIndexEntryRequest) returns (PutPrimaryIndexEntryResponse);
  rpc PutPrimaryIndexEntries (PutPrimaryIndexEntriesRequest) returns (PutPrimaryIndexEntriesResponse);
  rpc PutSecondaryIndexEntry (PutSecondaryIndexEntryRequest) returns (PutSecondaryIndexEntryResponse);
  rpc PutSecondaryIndexEntries (PutSecondaryIndexEntriesRequest) returns (PutSecondaryIndexEntriesResponse);
  rpc DeletePrimaryIndexEntry (DeletePrimaryIndexEntryRequest) returns (DeletePrimaryIndexEntryResponse);
  rpc DeletePrimaryIndexEntries (DeletePrimaryIndexEntriesRequest) returns (DeletePrimaryIndexEntriesResponse);
  rpc DeleteSecondaryIndexEntry (DeleteSecondaryIndexEntryRequest) returns (DeleteSecondaryIndexEntryResponse);
  rpc DeleteSecondaryIndexEntries (DeleteSecondaryIndexEntriesRequest) returns (DeleteSecondaryIndexEntriesResponse);
  rpc UpdatePrimaryIndexEntry (UpdatePrimaryIndexEntryRequest) returns (UpdatePrimaryIndexEntryResponse);
  rpc UpdatePrimaryIndexEntries (UpdatePrimaryIndexEntriesRequest) returns (UpdatePrimaryIndexEntriesResponse);
  rpc UpdateSecondaryIndexEntry (UpdateSecondaryIndexEntryRequest) returns (UpdateSecondaryIndexEntryResponse);
  rpc UpdateSecondaryIndexEntries (UpdateSecondaryIndexEntriesRequest) returns (UpdateSecondaryIndexEntriesResponse);
  rpc FlushIndexEntriesOfFile (FlushIndexEntriesOfFileRequest) returns (FlushIndexEntriesOfFileResponse);
  rpc OpenIndex (OpenIndexRequest) returns (OpenIndexResponse);
  rpc CloseIndex (CloseIndexRequest) returns (CloseIndexResponse);
  rpc RemoveIndex (RemoveIndexRequest) returns (RemoveIndexResponse);
}

message IndexKey {
  uint64 tableId = 1; // table id
  uint64 indexId = 2; // index id
  bytes key = 3; // index key
  uint64 timestamp = 4; // transaction timestamp
}

message RowLocation {
  uint64 fileId = 1; // the id of the file in pixels metadata, starts from 1
  uint32 rgId = 2; // the index of the row group inside the file, starts from 0
  uint32 rgRowOffset = 3; // the offset of the row in the row group, starting from 0
}

message RowIdBatch {
  uint64 rowIdStart = 1; // inclusive
  uint32 length = 2; // the number of row ids allocated
}

message PrimaryIndexEntry {
  IndexKey indexKey = 1;
  uint64 rowId = 2; // the rowId in this table
  RowLocation rowLocation = 3;
}

message SecondaryIndexEntry {
  IndexKey indexKey = 1;
  uint64 rowId = 2; // the rowId in this table
  // secondary index entry does not have associated row location
  bool unique = 3; // whether this secondary index is unique
}

message AllocateRowIdBatchRequest {
  uint64 tableId = 1;
  uint32 numRowIds = 2; // the number of row ids to allocate
}

message AllocateRowIdBatchResponse {
  int32 errorCode = 1;
  RowIdBatch rowIdBatch = 2;
}

message LookupUniqueIndexRequest {
  IndexKey indexKey = 1;
}

message LookupUniqueIndexResponse {
  int32 errorCode = 1;
  RowLocation rowLocation = 2;
}

message LookupNonUniqueIndexRequest {
  IndexKey indexKey = 1;
}

message LookupNonUniqueIndexResponse {
  int32 errorCode = 1;
  repeated RowLocation rowLocations = 2;
}

message PutPrimaryIndexEntryRequest {
  PrimaryIndexEntry indexEntry = 1;
}

message PutPrimaryIndexEntryResponse {
  int32 errorCode = 1;
}

message PutPrimaryIndexEntriesRequest {
  uint64 tableId = 1;
  uint64 indexId = 2;
  repeated PrimaryIndexEntry indexEntries = 3; // all entries must from the same index
}

message PutPrimaryIndexEntriesResponse {
  int32 errorCode = 1;
}

message PutSecondaryIndexEntryRequest {
  SecondaryIndexEntry indexEntry = 1;
}

message PutSecondaryIndexEntryResponse {
  int32 errorCode = 1;
}

message PutSecondaryIndexEntriesRequest {
  uint64 tableId = 1;
  uint64 indexId = 2;
  repeated SecondaryIndexEntry indexEntries = 3; // all entries must from the same index
}

message PutSecondaryIndexEntriesResponse {
  int32 errorCode = 1;
}

message DeletePrimaryIndexEntryRequest {
  IndexKey indexKey = 1;
}

message DeletePrimaryIndexEntryResponse {
  int32 errorCode = 1;
  RowLocation rowLocation = 2;
}

message DeletePrimaryIndexEntriesRequest {
  uint64 tableId = 1;
  uint64 indexId = 2;
  repeated IndexKey indexKeys = 3; // all entries must from the same index
}

message DeletePrimaryIndexEntriesResponse {
  int32 errorCode = 1;
  repeated RowLocation rowLocations = 2;
}

message DeleteSecondaryIndexEntryRequest {
  IndexKey indexKey = 1;
}

message DeleteSecondaryIndexEntryResponse {
  int32 errorCode = 1;
  uint64 rowId = 2;
}

message DeleteSecondaryIndexEntriesRequest {
  uint64 tableId = 1;
  uint64 indexId = 2;
  repeated IndexKey indexKeys = 3; // all entries must from the same index
}

message DeleteSecondaryIndexEntriesResponse {
  int32 errorCode = 1;
  repeated uint64 rowIds = 2;
}

message UpdatePrimaryIndexEntryRequest {
  IndexKey indexKey = 1;
}

message UpdatePrimaryIndexEntryResponse {
  int32 errorCode = 1;
  RowLocation rowLocation = 2;
}

message UpdatePrimaryIndexEntriesRequest {
  uint64 tableId = 1;
  uint64 indexId = 2;
  repeated IndexKey indexKeys = 3; // all entries must from the same index
}

message UpdatePrimaryIndexEntriesResponse {
  int32 errorCode = 1;
  repeated RowLocation rowLocations = 2;
}

message UpdateSecondaryIndexEntryRequest {
  IndexKey indexKey = 1;
}

message UpdateSecondaryIndexEntryResponse {
  int32 errorCode = 1;
  uint64 rowId = 2;
}

message UpdateSecondaryIndexEntriesRequest {
  uint64 tableId = 1;
  uint64 indexId = 2;
  repeated IndexKey indexKeys = 3; // all entries must from the same index
}

message UpdateSecondaryIndexEntriesResponse {
  int32 errorCode = 1;
  repeated uint64 rowIds = 2;
}

message FlushIndexEntriesOfFileRequest {
  uint64 fileId = 1; // the file id of which the index entries will be flushed
}

message FlushIndexEntriesOfFileResponse {
  int32 errorCode = 1;
}

message OpenIndexRequest {
  uint64 tableId = 1; // table id
  uint64 indexId = 2; // index id
}

message OpenIndexResponse {
  int32 errorCode = 1;
}

message CloseIndexRequest {
  uint64 tableId = 1; // table id
  uint64 indexId = 2; // index id
}

message CloseIndexResponse {
  int32 errorCode = 1;
}

message RemoveIndexRequest {
  uint64 tableId = 1; // table id
  uint64 indexId = 2; // index id
}

message RemoveIndexResponse {
  int32 errorCode = 1;
}